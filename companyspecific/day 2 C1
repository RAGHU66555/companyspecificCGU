5.Given an integer array Arr of size N the task is to find the count of elements whose value is greater than all of its prior elements.

Note : 1st element of the array should be considered in the count of the result.

For example,

Arr[]={7,4,8,2,9}

As 7 is the first element, it will consider in the result.

8 and 9 are also the elements that are greater than all of its previous elements.

Since total of  3 elements is present in the array that meets the condition.

Hence the output = 3.

 Example 1:

Input 

5 -> Value of N, represents size of Arr

7-> Value of Arr[0]

4 -> Value of Arr[1]

8-> Value of Arr[2]

2-> Value of Arr[3]

9-> Value of Arr[4]

Output :

3

Example 2:

5   -> Value of N, represents size of Arr

3  -> Value of Arr[0]

4 -> Value of Arr[1]

5 -> Value of Arr[2]

8 -> Value of Arr[3]

9 -> Value of Arr[4]

Output : 

5

Constraints

1<=N<=20

1<=Arr[i]<=10000

 Algorithm:
// 1. Start with max = Integer.MIN_VALUE.
// 2. For each element, if it is greater than max, count it and update max.
class GreaterThanPrevious {
 public static void main(String[] args) {
 Scanner sc = new Scanner(System.in);
 int n = sc.nextInt();
 int max = Integer.MIN_VALUE, count = 0;
 for (int i = 0; i < n; i++) {
 int val = sc.nextInt();
 if (val > max) {
 count++;
 max = val;
 }
 }
 System.out.println(count);
 }
}

6.A supermarket maintains a pricing format for all its products. A value N is printed on each product. When the scanner reads the value N on the item, the product of all the digits in the value N is the price of the item. The task here is to design the software such that given the code of any item N the product (multiplication) of all the digits of value should be computed(price).

Example 1:

Input :

5244 -> Value of N

Output :
160 -> Price 

Explanation:

From the input above 

Product of the digits 5,2,4,4

5*2*4*4= 160

Hence, output is 160.


Product of Digits
// Algorithm:
// 1. While N > 0, multiply the last digit with result and remove the digit.
class DigitProduct {
 public static void main(String[] args) {
 Scanner sc = new Scanner(System.in);
 int n = sc.nextInt(), product = 1;
 while (n > 0) {
 product *= n % 10;
 n /= 10;
 }
 System.out.println(product);
 }
}

7. A furnishing company is manufacturing a new collection of curtains. The curtains are of two colors aqua(a) and black (b). The curtains color is represented as a string(str) consisting of a’s and b’s of length N. Then, they are packed (substring) into L number of curtains in each box. The box with the maximum number of ‘aqua’ (a) color curtains is labeled. The task here is to find the number of ‘aqua’ color curtains in the labeled box.

Note :

If ‘L’ is not a multiple of N, the remaining number of curtains should be considered as a substring too. In simple words, after dividing the curtains in sets of ‘L’, any curtains left will be another set(refer example 1)

Example 1:

Input :

bbbaaababa -> Value of str

3    -> Value of L

Output:

3   -> Maximum number of a’s

Explanation:

From the input given above.

Dividing the string into sets of 3 characters each 

Set 1: {b,b,b}

Set 2: {a,a,a}

Set 3: {b,a,b}

Set 4: {a} -> leftover characters also as taken as another set

Among all the sets, Set 2 has more number of a’s. The number of a’s in set 2 is 3.

Hence, the output is 3.

Example 2:

Input :

abbbaabbb -> Value of str

5   -> Value of L

Output:

2   -> Maximum number of a’s

Explanation:

From the input given above,

Dividing the string into sets of 5 characters each.

Set 1: {a,b,b,b,b}

Set 2: {a,a,b,b,b}

Among both the sets, set 2 has more number of a’s. The number of a’s in set 2 is 2.

Hence, the output is 2.

Constraints:

1<=L<=10

1<=N<=50

The input format for testing 

The candidate has to write the code to accept two inputs separated by a new line.

First input- Accept string that contains character a and b only

Second input- Accept value for N(Positive integer number)

The output  format for testing

The output should be a positive integer number of print the message(if any) given in the problem statement.(Check the output in Example 1, Example 2).

 Max 'a' Curtains in Substrings of Size L
// Algorithm:
// 1. Split the string in substrings of length L.
// 2. Count 'a's in each substring and return the maximum.
class MaxCurtain {
 public static void main(String[] args) {
 Scanner sc = new Scanner(System.in);
 String str = sc.nextLine();
 int l = sc.nextInt(), max = 0;
 for (int i = 0; i < str.length(); i += l) {
 int end = Math.min(i + l, str.length()), count = 0;
 for (int j = i; j < end; j++)
 if (str.charAt(j) == 'a') count++;
 max = Math.max(max, count);
 }
 System.out.println(max);
 } 
} 

8.An international round table conference will be held in india. Presidents from all over the world representing their respective countries will be attending the conference. The task is to find the possible number of ways(P) to make the N members sit around the circular table such that.

The president and prime minister of India will always sit next to each other.

Example 1:

Input :

4   -> Value of N(No. of members)

Output : 

12  -> Possible ways of seating the members

Explanation:

2  members should always be next to each other. 

So, 2 members can be in 2!ways

Rest of the members can be arranged in (4-1)! ways.(1 is subtracted because the previously selected two members will be considered as single members now).

So total possible ways 4 members can be seated around the circular table 2*6= 12.

Hence, output is 12.

Example 2:

Input:

10  -> Value of N(No. of members)

Output :

725760 -> Possible ways of seating the members 

Explanation:

2 members should always be next to each other.

So, 2 members can be in 2! ways 

Rest of the members can be arranged in (10-1)! Ways. (1 is subtracted because the previously selected two members will be considered as a single member now).

So, total possible ways 10 members can be seated around a round table is 

2*362880 = 725760 ways.

Hence, output is 725760.

The input format for testing

The candidate has to write the code to accept one input 

First input – Accept value of number of N(Positive integer number)

The output format for testing 

The output should be a positive integer number or print the message(if any) given in the problem statement(Check the output in example 1, example2)

Constraints :

2<=N<=50

  
  Circular Seating with Two Fixed Members Together
// Algorithm:
// 1. Treat two fixed members as one block. Total ways = 2! * (N-1)!
class RoundTable {
 public static void main(String[] args) {
 Scanner sc = new Scanner(System.in);
 int n = sc.nextInt();
 System.out.println(2 * factorial(n - 1));
 }
 static int factorial(int n) {
 int res = 1;
 for (int i = 2; i <= n; i++) res *= i;
 return res;
 }
}

9.An intelligence agency has received reports about some threats. The reports consist of numbers in a mysterious method. There is a number “N” and another number “R”. Those numbers are studied thoroughly and it is concluded that all digits of the number ‘N’ are summed up and this action is performed ‘R’ number of times. The resultant is also a single digit that is yet to be deciphered. The task here is to find the single-digit sum of the given number ‘N’ by repeating the action ‘R’ number of times.

If the value of ‘R’ is 0, print the output as ‘0’.

Example 1:

Input :

99 -> Value of N

3  -> Value of R

Output :

9  -> Possible ways to fill the cistern.

Explanation:

Here, the number N=99

Sum of the digits N: 9+9 = 18
Repeat step 2 ‘R’ times i.e. 3 tims  (9+9)+(9+9)+(9+9) = 18+18+18 =54
Add digits of 54 as we need a single digit 5+4
Hence , the output is 9.

Example 2:

Input :

1234   -> Value of N

2      -> Value of R

Output :

2  -> Possible ways to fill the cistern

Explanation:

Here, the number N=1234

Sum of the digits of N: 1+2+3+4 =10
Repeat step 2 ‘R’ times i.e. 2 times  (1+2+3+4)+(1+2+3+4)= 10+10=20
Add digits of 20 as we need a single digit. 2+0=2
Hence, the output is 2.

Constraints:

0<N<=1000

0<=R<=50

The Input format for testing 

The candidate has to write the code to accept 2 input(s)

First input- Accept value for N (positive integer number)

Second input: Accept value for R(Positive integer number)

The output format for testing 

The output should be a positive integer number or print the message (if any) given in the problem statement. (Check the output in Example 1, Example 2).

 Repeated Sum of Digits R Times
// Algorithm:
// 1. Sum digits of N.
// 2. Multiply by R.
// 3. Reduce to single digit by summing digits repeatedly.
class RepeatedDigitSum {
 public static void main(String[] args) {
 Scanner sc = new Scanner(System.in);
 String n = sc.next();
 int r = sc.nextInt();
 if (r == 0) {
 System.out.println(0);
 return;
 }
 int sum = 0;
 for (char c : n.toCharArray()) sum += c - '0';
 sum *= r;
 while (sum >= 10) {
 int temp = 0;
 while (sum > 0) {
 temp += sum % 10;
 sum /= 10;
 }
 sum = temp;
 }
 // [*] 8. Repeated Sum of Digits R Times
// Algorithm:
// 1. Sum digits of N.
// 2. Multiply by R.
// 3. Reduce to single digit by summing digits repeatedly.
class RepeatedDigitSum {
 public static void main(String[] args) {
 Scanner sc = new Scanner(System.in);
 String n = sc.next();
 int r = sc.nextInt();
 if (r == 0) {
 System.out.println(0);
 return;
 }
 int sum = 0;
 for (char c : n.toCharArray()) sum += c - '0';
 sum *= r;
 while (sum >= 10) {
 int temp = 0;
 while (sum > 0) {
 temp += sum % 10;
 sum /= 10;
 }
 sum = temp;
 }
 System.out.println(sum);
 }
}

