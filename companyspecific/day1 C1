1.A chocolate factory is packing chocolates into the packets. The chocolate packets here represent an array  of N number of integer values. The task is to find the empty packets(0) of chocolate and push it to the end of the conveyor belt(array).

Example 1 :

N=8 and arr = [4,5,0,1,9,0,5,0].

There are 3 empty packets in the given set. These 3 empty packets represented as O should be pushed towards the end of the array

Input :

8  – Value of N

[4,5,0,1,9,0,5,0] – Element of arr[O] to arr[N-1],While input each element is separated by newline

Output:

4 5 1 9 5 0 0 0

Example 2:

Input:

6 — Value of N.

[6,0,1,8,0,2] – Element of arr[0] to arr[N-1], While input each element is separated by newline

Output:

6 1 8 2 0 0

 
Algorithm 1: 
1.create an array of size N 
and read the elements of array.
2.create a new array of same size 
as input arr 
3.Traverse the input array and copy all 
non zero values to the new arr  
4.return the res array as output 

            i
4,5,0,1,9,0,5,0 elements arr  n= 8
0 1 2 3 4 5 6 7 index 
4 5 1 9 5 0 0 0 temp 
          j
Algorithm 2: 
1.create an array of size N 
and read the elements of array.
2.create a new index for input arr 
3.Traverse the input array and move all 
non zero values to left and make remaining
index as 0  
4.return the res array as output 	  
		  
		              i  
		  6 1 2 1 0 0 ele 
		  0 1 2 3 4 5 index
		              j 		  
import java.util.Scanner;
class chocolate {
	public static void moveZeros(int N,int [] arr) {
		// write your logic here 
		int [] temp = new int [N];
		int index = 0;
		for(int i = 0;i<N;i++) {
			if(arr[i] != 0){
				temp[index] = arr[i];
				index++;
			}
		}
		for(index =0;index < N;index++) {
		System.out.print(temp[index]+ " ");
		}
	}
	 public static void main(String [] args){
		Scanner obj = new Scanner(System.in);
		int N = obj.nextInt();
		int [] arr = new int[N];
		for(int i = 0;i<N;i++) {
			arr[i]=obj.nextInt();
		}
		moveZeros(N,arr);
	}
}

import java.util.Scanner;
class chocolate {
	public static void moveZeros(int N,int [] arr) {
		// write your logic here 
		int index = 0;
		for(int i = 0;i<N;i++) {
			if(arr[i] != 0){
				arr[index] = arr[i];
				index++;
			}
		}
		while(index < N) {
			arr[index] = 0;
			index++;
		}
		for(index =0;index < N;index++) {
		System.out.print(arr[index]+ " ");
		}
	}
	
	 public static void main(String [] args){
		Scanner obj = new Scanner(System.in);
		int N = obj.nextInt();
		int [] arr = new int[N];
		for(int i = 0;i<N;i++) {
			arr[i]=obj.nextInt();
		}
		moveZeros(N,arr);
	}
}

2. Joseph is learning digital logic subject which will be for his next semester. He usually tries to solve unit assignment problems before the lecture. Today he got one tricky question. The problem statement is “A positive integer has been given as an input. Convert decimal value to binary representation. Toggle all bits of it including the most significant bit. Print the positive integer value after toggling all bits”.

Constrains-

1<=N<=100

Example 1:

Input :

10  -> Integer

Output :

5    -> result- Integer

Explanation:

Binary representation of 10 is 1010. After toggling the bits(1010), will get 0101 which represents “5”. Hence output will print “5”.

 Toggle All Bits Including MSB
// Algorithm:
// 1. Find the number of bits in N using Integer.toBinaryString(N).length().
// 2. Create a mask with all 1's of that length.
// 3. XOR the mask with N to toggle the bits.
import java.util.*;
class ToggleBits {
 public static void main(String[] args) {
 Scanner sc = new Scanner(System.in);
 int n = sc.nextInt();
 int bits = Integer.toBinaryString(n).length();
//int mask = (1 << (int)(log2(n) + 1)) - 1;
 int mask = (1 << bits) - 1;
 System.out.println(n ^ mask);
 }
}

3.Jack is always excited about sunday. It is favourite day, when he gets to play all day. And goes to cycling with his friends. 

So every time when the months starts he counts the number of sundays he will get to enjoy. Considering the month can start with any day, be it Sunday, Monday…. Or so on.

Count the number of Sunday jack will get within n number of days.

 Example 1:

Input 

mon-> input String denoting the start of the month.

13  -> input integer denoting the number of days from the start of the month.

Output :

2    -> number of days within 13 days.

Explanation:

The month start with mon(Monday). So the upcoming sunday will arrive in next 6 days. And then next Sunday in next 7 days and so on.

Now total number of days are 13. It means 6 days to first sunday and then remaining 7 days will end up in another sunday. Total 2 sundays may fall within 13 days.

//  Count Sundays in N Days
// Algorithm:
// 1. Map the input day to an index (0 for sun, 1 for mon, etc.).
// 2. Count how many times (index + i) % 7 == 0 for i in range 0 to N-1.
class CountSundays {
 public static void main(String[] args) {
 Scanner sc = new Scanner(System.in);
 String day = sc.nextLine();
 int n = sc.nextInt();
 String[] week = {"sun", "mon", "tue", "wed", "thu", "fri", "sat"};
 int index = 0;
 for (int i = 0; i < 7; i++) if (week[i].equals(day)) index = i;
 int count = 0;
 for (int i = 0; i < n; i++) if ((index + i) % 7 == 0) count++;
 System.out.println(count);
 }
}

4. Airport security officials have confiscated several item of the passengers at the security check point. All the items have been dumped into a huge box (array). Each item possesses a certain amount of risk[0,1,2]. Here, the risk severity of the items represent an array[] of N number of integer values. The task here is to sort the items based on their levels of risk in the array. The risk values range from 0 to 2.

Example :

Input :

7  -> Value of N

[1,0,2,0,1,0,2]-> Element of arr[0] to arr[N-1], while input each element is separated by new line.

Output :

0 0 0 1 1 2 2  -> Element after sorting based on risk severity 

Example 2:

input : 10  -> Value of N 

[2,1,0,2,1,0,0,1,2,0] -> Element of arr[0] to arr[N-1], while input each element is separated by a new line.

Output : 

0 0 0 0 1 1 1 2 2 2  ->Elements after sorting based on risk severity.

Explanation:

In the above example, the input is an array of size N consisting of only 0’s, 1’s and 2s. The output is a sorted array from 0 to 2 based on risk severity.

 Sort Items by Risk (0, 1, 2)
// Algorithm:
// 1. Count the number of 0s, 1s, and 2s.
// 2. Print 0s first, then 1s, then 2s.
class SortRisk {
 public static void main(String[] args) {
 Scanner sc = new Scanner(System.in);
 int n = sc.nextInt();
 int[] count = new int[3];
 for (int i = 0; i < n; i++) count[sc.nextInt()]++;
 for (int i = 0; i < 3; i++)
 for (int j = 0; j < count[i]; j++)
 System.out.print(i + " ");
 }
}
